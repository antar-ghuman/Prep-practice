class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:

        n = len(nums)
        left = 0
        if n == 0:
            return 0

        ans = float('inf')
        current_sum = 0

        for right in range(n):
            current_sum += nums[right]
            while current_sum >= target:
                ans = min(ans, ( right - left+1))
                current_sum -= nums[left]
                left+=1
        return ans if ans != float('inf') else 0


    # n = len(nums)
    # if n == 0:
    #     return 0

    # ans = float('inf')
    # sums = [0] * n
    # sums[0] = nums[0]

    # for i in range(1, n):
    #     sums[i] = sums[i - 1] + nums[i]

    # for i in range(n):
    #     for j in range(i, n):
    #         current_sum = sums[j] - sums[i] + nums[i]
    #         if current_sum >= s:
    #             ans = min(ans, (j - i + 1))
    #             break  # Found the smallest subarray with sum>=s starting with index i, hence move to the next index

    # return ans if ans != float('inf') else 0

                
