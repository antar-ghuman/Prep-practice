class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}  # Use a dictionary to store the key-value pairs
        self.order = []  # Use a list to maintain the order of keys (most recently used at the end)

    def get(self, key: int) -> int:
        if key in self.cache:
            # Move the accessed key to the end (most recently used)
            self.order.remove(key)
            self.order.append(key)
            return self.cache[key]
        else:
            return -1  # Key not found

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # Update the value and move the key to the end (most recently used)
            self.cache[key] = value
            self.order.remove(key)
            self.order.append(key)
        else:
            if len(self.cache) >= self.capacity:
                # Remove the least recently used key from both the cache and order list
                lru_key = self.order.pop(0)
                del self.cache[lru_key]

            # Add the new key-value pair to the cache and order list
            self.cache[key] = value
            self.order.append(key)
