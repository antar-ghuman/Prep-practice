# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        revert_data = self.reverse_linked_list(slow)
        check = self.compare_two_halves(head, revert_data)
        self.reverse_linked_list(revert_data)
        
        return check

    def reverse_linked_list(self, head):
        prev = None
        current = head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        return prev

    def compare_two_halves(self, first_half, second_half):
        while first_half and second_half:
            if first_half.val != second_half.val:
                return False
            else:
                first_half = first_half.next
                second_half = second_half.next
        return True
        
