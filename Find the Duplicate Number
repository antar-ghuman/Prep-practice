class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        # nums.sort()
        # for i in range(1, len(nums)):
        #     if nums[i] == nums[i-1]:
        #         return nums[i]

        # seen = set()
        # for num in nums:
        #     if num in seen:
        #         return num
        #     seen.add(num)

        # for num in nums:
        #     cur = abs(num)
        #     if nums[cur] < 0:
        #         duplicate = cur
        #         break
        #     nums[cur] = -nums[cur]

        # # Restore numbers
        # for i in range(len(nums)):
        #     nums[i] = abs(nums[i])

        # return duplicate

        # while nums[0] != nums[nums[0]]:
        #     nums[nums[0]], nums[0] = nums[0], nums[nums[0]]
        # return nums[0]

        # Find the intersection point of the two runners.
        tortoise = hare = nums[0]
        while True:
            tortoise = nums[tortoise]
            hare = nums[nums[hare]]
            if tortoise == hare:
                break
        
        # Find the "entrance" to the cycle.
        tortoise = nums[0]
        while tortoise != hare:
            tortoise = nums[tortoise]
            hare = nums[hare]
        
        return hare
